generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model guest_view {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  view_date       DateTime      @default(now()) @db.Timestamp(6)
  user_id         String?       @db.Uuid
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invitation {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String        @db.VarChar(255)
  role            String        @db.VarChar(255)
  status          String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  invited_by      String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  user            user?         @relation(fields: [invited_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  guest_view  guest_view[]
  invitation  invitation[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  solar_plant solar_plant[]
}

model plant_data {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  data           String
  upload_date    DateTime     @default(now()) @db.Timestamp(6)
  user_id        String?      @db.Uuid
  solar_plant_id String?      @db.Uuid
  created_at     DateTime     @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @default(now()) @db.Timestamp(6)
  solar_plant    solar_plant? @relation(fields: [solar_plant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model solar_plant {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  commissioning_date DateTime      @db.Date
  location           String        @db.VarChar(255)
  asset_size         Int
  organization_id    String?       @db.Uuid
  created_at         DateTime      @default(now()) @db.Timestamp(6)
  updated_at         DateTime      @default(now()) @db.Timestamp(6)
  plant_data         plant_data[]
  organization       organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  guest_view   guest_view[]
  invitation   invitation[]
  organization organization[]
  plant_data   plant_data[]
}
